{"version":3,"sources":["components/Header.js","components/TodoContext.js","components/ItemForm.js","components/AddItem.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","todoContext","createContext","ItemForm","setTodo","useContext","todoList","setTodoList","useState","item","setItem","type","value","onChange","e","target","onClick","id","parseInt","Math","random","AddItem","add","setAdd","title","style","transform","TodoItem","TodoList","map","todo","key","App","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+MASeA,G,MAPA,WACX,OACI,yBAAKC,UAAU,oBAAf,e,OCFKC,EAAcC,0BCmBZC,EAlBE,SAAC,GAAc,EAAbC,QAAc,IAAD,EACIC,qBAAWJ,GADf,mBACrBK,EADqB,KACXC,EADW,OAEJC,mBAAS,IAFL,mBAErBC,EAFqB,KAEfC,EAFe,KAO5B,OACI,yBAAKV,UAAU,kBACX,yBAAKA,UAAU,mBACX,wCACA,2BAAOW,KAAK,OAAOX,UAAU,aAAaY,MAAOH,EAAMI,SAAW,SAAAC,GAAC,OAAIJ,EAAQI,EAAEC,OAAOH,UACxF,4BAAQZ,UAAU,aAAagB,QATxB,WACfT,EAAY,GAAD,mBAAKD,GAAL,CAAc,CAACW,GAAGC,SAAuB,IAAdC,KAAKC,UAAeX,KAAKA,MAC/DC,EAAQ,MAOA,kBCEDW,EAdC,WAAO,IAAD,EACIb,oBAAS,GADb,mBACXc,EADW,KACNC,EADM,KAElB,OACI,yBAAKvB,UAAU,sBACTsB,GAAO,kBAAC,EAAD,MACT,yBAAKtB,UAAU,OAAOwB,MAAM,WAC5BR,QAAS,kBAAKO,GAAQD,IACtBG,MAAOH,EAAM,CAACI,UAAW,kBAAoB,CAACA,UAAW,kBACrD,yBAAK1B,UAAU,gBCDhB2B,EARE,SAAC,GAAY,IAAXlB,EAAU,EAAVA,KACf,OACI,yBAAKT,UAAU,kBACVS,ICUEmB,EAXE,WAAO,IAAD,EACavB,qBAAWJ,GADxB,mBACZK,EADY,UAEnB,OACI,yBAAKN,UAAU,gBAEPM,EAASuB,KAAK,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAUC,IAAKD,EAAKb,GAAIR,KAAMqB,EAAKrB,YCY1DuB,MAdf,WAAgB,IAAD,EACmBxB,mBAAS,IAD5B,mBACNF,EADM,KACIC,EADJ,KAGb,OACE,kBAACN,EAAYgC,SAAb,CAAsBrB,MAAO,CAACN,EAAUC,IACtC,yBAAKP,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.b6c8bf81.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <div className=\"header-container\">\n            TO-DO App\n        </div>\n    );\n};\nexport default Header;","import {createContext} from 'react';\n\nexport const todoContext = createContext();\n","import React, { useState, useContext } from 'react';\nimport { todoContext } from './TodoContext';\n\nconst ItemForm = ({setTodo}) => {\n    const [todoList, setTodoList] = useContext(todoContext); \n    const [item, setItem] = useState('');\n    const updateTodo = () => {\n        setTodoList([...todoList,{id:parseInt(Math.random()*1000),item:item}]);\n        setItem('');\n    };\n    return (\n        <div className='form-container'>\n            <div className='input-container'>\n                <label>Task:</label>\n                <input type='text' className='item-input' value={item} onChange={ e => setItem(e.target.value)}/>\n                <button className='add-button' onClick={updateTodo}>Add to List</button>\n            </div>\n        </div>\n    );\n};\n\nexport default ItemForm;","import React, { useState } from 'react';\nimport ItemForm from './ItemForm';\n\nconst AddItem = () => {\n    const [add, setAdd] = useState(true);\n    return (\n        <div className='add-item-container'>\n            { add && <ItemForm/> }\n            <div className='icon' title='Add Item' \n            onClick={()=> setAdd(!add)} \n            style={add ? {transform: 'rotateZ(45deg)'} : {transform: 'rotateZ(0deg)'}}>\n                <div className=\"add-icon\" />\n                </div>\n        </div>\n    );\n};\n\nexport default AddItem;","import React from 'react';\n\nconst TodoItem = ({item}) => {\n    return (\n        <div className='item-container'>\n            {item}\n        </div>\n    );\n};\n\nexport default TodoItem;","import React, { useContext } from 'react';\nimport TodoItem from \"./TodoItem\";\nimport {todoContext} from './TodoContext';\n\nconst TodoList = () => {\n    const [todoList, setTodoList] = useContext(todoContext);\n    return (\n        <div className='list-content'>\n            {\n                todoList.map( todo => <TodoItem key={todo.id} item={todo.item}/>)\n            }\n        </div>\n    );\n};\n\nexport default TodoList;","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport AddItem from './components/AddItem';\nimport TodoList from './components/TodoList';\nimport {todoContext} from './components/TodoContext';\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n\n  return (\n    <todoContext.Provider value={[todoList, setTodoList]}>\n      <div className=\"App\">\n        <Header />\n        <TodoList />\n        <AddItem />\n      </div>\n    </todoContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}